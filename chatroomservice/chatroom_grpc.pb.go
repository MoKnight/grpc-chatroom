// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: chatroom.proto

package chatroomservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatServiceClient is the client API for ChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatServiceClient interface {
	// 定义双向开关控制函数
	Talk(ctx context.Context, opts ...grpc.CallOption) (ChatService_TalkClient, error)
}

type chatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatServiceClient(cc grpc.ClientConnInterface) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) Talk(ctx context.Context, opts ...grpc.CallOption) (ChatService_TalkClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[0], "/chatroomservice.ChatService/Talk", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServiceTalkClient{stream}
	return x, nil
}

type ChatService_TalkClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type chatServiceTalkClient struct {
	grpc.ClientStream
}

func (x *chatServiceTalkClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatServiceTalkClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatServiceServer is the server API for ChatService service.
// All implementations must embed UnimplementedChatServiceServer
// for forward compatibility
type ChatServiceServer interface {
	// 定义双向开关控制函数
	Talk(ChatService_TalkServer) error
	mustEmbedUnimplementedChatServiceServer()
}

// UnimplementedChatServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChatServiceServer struct {
}

func (UnimplementedChatServiceServer) Talk(ChatService_TalkServer) error {
	return status.Errorf(codes.Unimplemented, "method Talk not implemented")
}
func (UnimplementedChatServiceServer) mustEmbedUnimplementedChatServiceServer() {}

// UnsafeChatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServiceServer will
// result in compilation errors.
type UnsafeChatServiceServer interface {
	mustEmbedUnimplementedChatServiceServer()
}

func RegisterChatServiceServer(s grpc.ServiceRegistrar, srv ChatServiceServer) {
	s.RegisterService(&ChatService_ServiceDesc, srv)
}

func _ChatService_Talk_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatServiceServer).Talk(&chatServiceTalkServer{stream})
}

type ChatService_TalkServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type chatServiceTalkServer struct {
	grpc.ServerStream
}

func (x *chatServiceTalkServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatServiceTalkServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatService_ServiceDesc is the grpc.ServiceDesc for ChatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chatroomservice.ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Talk",
			Handler:       _ChatService_Talk_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "chatroom.proto",
}
